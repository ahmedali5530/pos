security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api_doc:
            pattern: ^/api/doc
            security: false

        login:
            pattern: ^/api/auth/login_check
            stateless: true
            json_login:
                check_path: api_login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api_token_refresh:
            pattern: ^/api/token/refresh
            stateless: true
            refresh_jwt: ~

        api:
            pattern: ^/(api/admin)|(api/client)|(api/auth/info)
            stateless: true
            provider: user_provider
            jwt: ~

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/auth/login_check, roles: [ IS_AUTHENTICATED_ANONYMOUSLY ] }
        - { path: ^/api/auth/reset-password, roles: [ IS_AUTHENTICATED_ANONYMOUSLY ] }
        - { path: ^/api/auth/forgot-password, roles: [ IS_AUTHENTICATED_ANONYMOUSLY ] }
        - { path: ^/api/auth/register, roles: [ IS_AUTHENTICATED_ANONYMOUSLY ] }
        - { path: ^/api/token/refresh, roles: [ IS_AUTHENTICATED_ANONYMOUSLY ] }
        - { path: ^/api/admin, roles: [ ROLE_ADMIN, ROLE_USER ] }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
